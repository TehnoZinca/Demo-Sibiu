package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
/*
 * This is an example LinearOpMode that shows how to use
 * the REV Robotics Color-Distance Sensor.
 *
 * It assumes the sensor is configured with the name "sensor_color_distance".
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list.
 */
@Autonomous(name = "SensorColorROSU")// Comment this out to add to the opmode list
public class SensorColorROSU extends LinearOpMode {
    private DcMotor ColectorE = null;
    private DcMotor ColectorV = null;
    private Servo LegoStanga1 = null;
    private  Servo LegoStanga2 = null;
    private Servo LegoDreapta1 = null;
    private  Servo LegoDreapta2 = null;
    private DistanceSensor sensorRange;
    public DcMotor MotorDF = null;
    public DcMotor MotorSF = null;
    public DcMotor MotorDJ = null;
    public DcMotor MotorSJ = null;
    double ok=0,k=0,nuvede=0,t=1,u=1;
    BNO055IMU imu;
    Orientation angles;
    ColorSensor sensorColorD;
    ColorSensor sensorColorS;
    ///DistanceSensor sensorDistance;

    @Override
    public void runOpMode() {

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        //am configurat gyroul integrat si i-am definit unitatea de masura

        sensorRange = hardwareMap.get(DistanceSensor.class, "sensor_range");
        MotorDF = hardwareMap.dcMotor.get("Tright_drive");
        MotorDJ = hardwareMap.dcMotor.get("Bright_drive");
        MotorSF = hardwareMap.dcMotor.get("Tleft_drive");
        MotorSJ = hardwareMap.dcMotor.get("Bleft_drive");
        ColectorE = hardwareMap.get(DcMotor.class, "ColectorE");
        ColectorV = hardwareMap.get(DcMotor.class, "ColectorV");

        MotorSJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorSF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        //am regasit printe elementele robotului conectate le hub cele 4 motoare


        MotorSF.setDirection(DcMotorSimple.Direction.REVERSE);
        MotorSJ.setDirection(DcMotorSimple.Direction.REVERSE);
        //am declarat ca motoarele de pe partea stanga se vormisca in sens invers

        MotorSF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        // get a reference to the color sensor.
        sensorColorD = hardwareMap.get(ColorSensor.class, "SensorColorD");
        sensorColorS = hardwareMap.get(ColorSensor.class, "SensorColorS");
        ColectorE = hardwareMap.get(DcMotor.class, "ColectorE");
        ColectorV = hardwareMap.get(DcMotor.class, "ColectorV");
        LegoStanga1 = hardwareMap.servo.get("LegoStanga1");
        LegoStanga2 = hardwareMap.servo.get("LegoStanga2");
        LegoDreapta1 = hardwareMap.servo.get("LegoDreapta1");
        LegoDreapta2 = hardwareMap.servo.get("LegoDreapta2");

        // get a reference to the distance sensor that shares the same name.
        ///sensorDistance = hardwareMap.get(DistanceSensor.class, "sensor_color_distance");

        // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues[] = {0F, 0F, 0F};

        // values is a reference to the hsvValues array.
        final float values[] = hsvValues;

        // sometimes it helps to multiply the raw RGB values with a scale factor
        // to amplify/attentuate the measured values.
        final double SCALE_FACTOR = 255;

        // get a reference to the RelativeLayout so we can change the background
        // color of the Robot Controller app to match the hue detected by the RGB sensor.
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
        //am identificat gyroul integrat printre componentele robotului


        // wait for the start button to be pressed.
        waitForStart();
        while (opModeIsActive()) {
            Color.RGBToHSV((int) (sensorColorD.red() * SCALE_FACTOR),
                    (int) (sensorColorD.green() * SCALE_FACTOR),
                    (int) (sensorColorD.blue() * SCALE_FACTOR),
                    hsvValues);
            Color.RGBToHSV((int) (sensorColorS.red() * SCALE_FACTOR),
                    (int) (sensorColorS.green() * SCALE_FACTOR),
                    (int) (sensorColorS.blue() * SCALE_FACTOR),
                    hsvValues);


































            Diagonala(0.4, -2910);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }
            MotorSF.setPower(0);
            MotorSJ.setPower(0);
            MotorDF.setPower(0);
            MotorDJ.setPower(0);
            sleep(200);
            LegoStanga1.setPosition(-0.7); //se lasa
            sleep(500);
            LegoStanga2.setPosition(-0.9); //se lasa
            sleep(500);
            Fata(0.3, -180);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }
            MotorSF.setPower(0);
            MotorSJ.setPower(0);
            MotorDF.setPower(0);
            MotorDJ.setPower(0);
            sleep(500);
            telemetry.addData("Red  ", sensorColorD.red());
            telemetry.addData("Green", sensorColorD.green());
            telemetry.addData("Blue ", sensorColorD.blue());
            telemetry.addData("Red  ", sensorColorS.red());
            telemetry.addData("Green", sensorColorS.green());
            telemetry.addData("Blue ", sensorColorS.blue());
            telemetry.addData("Hue", hsvValues[0]);

            double r,g,b;
            r=sensorColorD.red();
            g=sensorColorD.green();
            b=sensorColorD.blue();
            if((r*g)/(b*b)<=3)//sau <=2 depinde de senzor
            { LegoStanga1.setPosition(0.7);//agata caramida
                sleep(1000);
                //LegoStanga2.setPosition(0.5); //se ridica
                //sleep(2000);
                ok=1;
            }
            if(ok==1) {
                nuvede=1;
                Fata(0.3, 480);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(200);


                Laterala(0.8, 5400);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(200);

                LegoStanga1.setPosition(-0.7);
                sleep(200);
                LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                sleep(200);
                LegoStanga1.setPosition(0.7);
                sleep(200);
                LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                sleep(200);

                Laterala1(0.6, -3580);
                while (opModeIsActive()&& !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(500);


                if(sensorRange.getDistance(DistanceUnit.MM)>100)
                {
                    Lego();
                    while(sensorRange.getDistance(DistanceUnit.MM)>85) {
                        Fata(0.7, -150);
                        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                            telemetry.addData("Heading: ", angles.firstAngle);
                            telemetry.addData("Roll: ", angles.secondAngle);
                            telemetry.addData("Pitch", angles.thirdAngle);
                            telemetry.update();
                        }
                        MotorSF.setPower(0);
                        MotorSJ.setPower(0);
                        MotorDF.setPower(0);
                        MotorDJ.setPower(0);
                        sleep(50);
                        telemetry.update();
                        telemetry.addData("deviceName",sensorRange.getDeviceName());
                        telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));

                    }

                    LegoStanga1.setPosition(0.7); //se lasa
                    sleep(500);

                    t=0;

                }

                if(sensorRange.getDistance(DistanceUnit.MM)<100 && t==1)
                {
                    while(sensorRange.getDistance(DistanceUnit.MM)<100) {
                        Fata(0.5, 100);
                        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                            telemetry.addData("Heading: ", angles.firstAngle);
                            telemetry.addData("Roll: ", angles.secondAngle);
                            telemetry.addData("Pitch", angles.thirdAngle);
                            telemetry.update();
                        }
                        MotorSF.setPower(0);
                        MotorSJ.setPower(0);
                        MotorDF.setPower(0);
                        MotorDJ.setPower(0);
                        sleep(200);
                        telemetry.update();
                        telemetry.addData("deviceName",sensorRange.getDeviceName());
                        telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));

                    }
                    Lego();
                    LegoStanga1.setPosition(0.7); //se lasa
                    sleep(500);

                }


                Fata(0.5, 470);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(200);

                Laterala(0.8, 3700);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(200);
                LegoStanga1.setPosition(-0.7);
                sleep(200);
                LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                sleep(200);
                LegoStanga1.setPosition(0.7);
                sleep(200);
                LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                sleep(200);

                Fata(0.5, -300);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(200);
                Laterala(0.5, -1300);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
               break;
            }


































































            Fata(0.3, 50);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }

            Laterala(0.3, 560);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }
            telemetry.addData("Red  ", sensorColorD.red());
            telemetry.addData("Green", sensorColorD.green());
            telemetry.addData("Blue ", sensorColorD.blue());
            telemetry.addData("Red  ", sensorColorS.red());
            telemetry.addData("Green", sensorColorS.green());
            telemetry.addData("Blue ", sensorColorS.blue());
            telemetry.addData("Hue", hsvValues[0]);

            double r1,g1,b1;
            r1=sensorColorD.red();
            g1=sensorColorD.green();
            b1=sensorColorD.blue();
            if((r1*g1)/(b1*b1)<=3)//sau <=2 depinde de senzor
            {   Fata(0.5, -100);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }

                LegoStanga1.setPosition(0.7);//agata caramida
                sleep(700);
                //LegoStanga2.setPosition(0.5); //se ridica
                //sleep(2000);
                k=1;

            }
            if(k==1)
            {nuvede=1;
                Fata(0.5, 400);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                Laterala(0.8, 4660);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(100);

                LegoStanga1.setPosition(-0.7);
                sleep(200);
                LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                sleep(200);
                LegoStanga1.setPosition(0.7);
                sleep(200);
                LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                sleep(200);

                Lateralat(0.5, -3150);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(100);

                Fata(0.5, 70);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(50);

                telemetry.update();
                telemetry.addData("deviceName",sensorRange.getDeviceName());
                telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));

                if(sensorRange.getDistance(DistanceUnit.MM)>100)
                {
                    Lego();
                    while(sensorRange.getDistance(DistanceUnit.MM)>85) {
                        Fata(0.7, -150);
                        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                            telemetry.addData("Heading: ", angles.firstAngle);
                            telemetry.addData("Roll: ", angles.secondAngle);
                            telemetry.addData("Pitch", angles.thirdAngle);
                            telemetry.update();
                        }
                        MotorSF.setPower(0);
                        MotorSJ.setPower(0);
                        MotorDF.setPower(0);
                        MotorDJ.setPower(0);
                        sleep(50);
                        telemetry.update();
                        telemetry.addData("deviceName",sensorRange.getDeviceName());
                        telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));

                    }

                    LegoStanga1.setPosition(0.7); //se lasa
                    sleep(500);

                    t=0;

                }

                if(sensorRange.getDistance(DistanceUnit.MM)<100 && t==1)
                {
                    while(sensorRange.getDistance(DistanceUnit.MM)<100) {
                        Fata(0.5, 100);
                        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                            telemetry.addData("Heading: ", angles.firstAngle);
                            telemetry.addData("Roll: ", angles.secondAngle);
                            telemetry.addData("Pitch", angles.thirdAngle);
                            telemetry.update();
                        }
                        MotorSF.setPower(0);
                        MotorSJ.setPower(0);
                        MotorDF.setPower(0);
                        MotorDJ.setPower(0);
                        sleep(200);
                        telemetry.update();
                        telemetry.addData("deviceName",sensorRange.getDeviceName());
                        telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));

                    }
                    Lego();
                    LegoStanga1.setPosition(0.7); //se lasa
                    sleep(500);

                }









                Fata(0.5, 470);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(100);

                Laterala(0.8, 3400);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                MotorSF.setPower(0);
                MotorSJ.setPower(0);
                MotorDF.setPower(0);
                MotorDJ.setPower(0);
                sleep(100);

                LegoStanga1.setPosition(-0.7);
                sleep(200);
                LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                sleep(200);
                LegoStanga1.setPosition(0.7);
                sleep(200);
                LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                sleep(200);


                Laterala(0.7, -1500);
                while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                    angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                    telemetry.addData("Heading: ", angles.firstAngle);
                    telemetry.addData("Roll: ", angles.secondAngle);
                    telemetry.addData("Pitch", angles.thirdAngle);
                    telemetry.update();
                }
                break;
            }











































                  if(nuvede==0) {
                      Laterala(0.5, 540);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      Fata(0.5, -120);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      LegoStanga1.setPosition(0.7);//agata caramida
                      sleep(500);


                      Fata(0.4, 370);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      Laterala2(0.8, 4510);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(200);

                      LegoStanga1.setPosition(-0.7);
                      sleep(200);
                      LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                      sleep(200);
                      LegoStanga1.setPosition(0.7);
                      sleep(200);
                      LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                      sleep(200);


                      Lateralay(0.4, -2760);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(200);
                      Lego();
                      Fata(0.3, -370);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(100);

                      LegoStanga1.setPosition(0.7);
                      sleep(700);


                      Fata(0.5, 530);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(100);

                      Laterala(0.9, 2400);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(100);

                      LegoStanga1.setPosition(-0.7);
                      sleep(200);
                      LegoStanga2.setPosition(0.2);//bratul mare care se ridica!!!!!;
                      sleep(200);
                      LegoStanga1.setPosition(0.7);
                      sleep(200);
                      LegoStanga2.setPosition(0.5);//bratul mare care se ridica!!!!!;
                      sleep(200);

                     Fata(0.7, -200);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }
                      MotorSF.setPower(0);
                      MotorSJ.setPower(0);
                      MotorDF.setPower(0);
                      MotorDJ.setPower(0);
                      sleep(100);
                      Laterala(1, -1300);
                      while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                          angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                          telemetry.addData("Heading: ", angles.firstAngle);
                          telemetry.addData("Roll: ", angles.secondAngle);
                          telemetry.addData("Pitch", angles.thirdAngle);
                          telemetry.update();
                      }

                      break;

                  }
















            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

            telemetry.update();
        }

        // Set the panel back to the default color
        relativeLayout.post(new Runnable() {
            public void run() {
                relativeLayout.setBackgroundColor(Color.WHITE);
            }
        });
    }
    public void Fata(double p,int t){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(-t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(-t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
        if((t-MotorDF.getCurrentPosition()<t-50) &&(t-MotorDJ.getCurrentPosition()<t-50) && (t-MotorSF.getCurrentPosition()<t-50)&&(t-MotorSJ.getCurrentPosition()<t-50))
        {p=0;
        MotorDF.setPower(0);
        MotorDF.setPower(0);
        MotorDF.setPower(0);
        MotorDF.setPower(0);
        }
    }
    public void Diagonala(double p,int t){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(-t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(-t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(0);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(0);
    }
    public void Laterala1(double p,int t) {
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);//0,1;//0.05
        MotorDJ.setPower(p+0.1);//baterie descarcata 0.15
    }
    public void Lateralat(double p,int t) {
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p+0.1);//0,1;//0.05
        MotorDJ.setPower(p);//baterie descarcata 0.15
    }

    public void Lego() {
        LegoStanga1.setPosition(-0.7); //se lasa
        sleep(300);
        LegoStanga2.setPosition(-0.9); //se lasa
        sleep(300);
    }

    public void Laterala2(double p,int t) {
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p+0.1);
        MotorSJ.setPower(p+0.15);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
    }
    public void Lateralay(double p,int t) {
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
    }

    public void Laterala(double p,int t){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);


        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p+0.1);
        MotorDF.setPower(p);
        MotorDJ.setPower(p+0.03);
        if(t>0) {
            if ((t - MotorDF.getCurrentPosition() > (t - 150)) && (t - MotorDJ.getCurrentPosition() < (t - 150)) && (t - MotorSF.getCurrentPosition() < (t - 150)) && (t - MotorSJ.getCurrentPosition() > (t - 150))) {
                p = 0;
                MotorDF.setPower(0);
                MotorDF.setPower(0);
                MotorDF.setPower(0);
                MotorDF.setPower(0);
            }
        }
        if(t<0) {
            if ((t - MotorDF.getCurrentPosition() < (t - 150)) && (t - MotorDJ.getCurrentPosition() > (t - 150)) && (t - MotorSF.getCurrentPosition() > (t - 150)) && (t - MotorSJ.getCurrentPosition() < (t - 150))) {
                p = 0;
                MotorDF.setPower(0);
                MotorDF.setPower(0);
                MotorDF.setPower(0);
                MotorDF.setPower(0);
            }
        }
        }
    }
